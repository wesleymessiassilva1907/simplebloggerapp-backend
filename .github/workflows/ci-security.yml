name: ci-security

on:
  workflow_call:
    inputs:
      node_version: { type: string, default: '20' }
      run_zap: { type: boolean, default: true }
      port: { type: string, default: '5005' }
      health_path: { type: string, default: '/' }

permissions:
  contents: read
  security-events: write
  actions: read 

jobs:
  lint_test_sast_dast:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    services:
      mongo:
        image: mongo:6
        ports: [ "27017:27017" ]
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Instalar dependências (npm install)
        if: ${{ hashFiles('package-lock.json','npm-shrinkwrap.json') == '' }}
        run: npm install --no-fund --no-audit

      - name: Instalar dependências (npm ci)
        if: ${{ hashFiles('package-lock.json','npm-shrinkwrap.json') != '' }}
        run: npm ci --no-fund --no-audit

      - name: Esperar Mongo
        run: |
          npx -y wait-on@8 -t 30000 tcp:127.0.0.1:27017 || { echo "porta 27017 indisponível"; exit 1; }
          CID=$(docker ps --filter "name=mongo" -q | head -n1)
          for i in {1..10}; do
            if docker exec "$CID" mongosh --quiet --eval "db.runCommand({ ping: 1 })" >/dev/null; then
              echo "Mongo OK"; exit 0
            fi
            sleep 2
          done
          echo "Mongo não respondeu ao ping"
          docker logs "$CID" | tail -n 200 || true
          exit 1

      - name: ESLint
        run: npx eslint . --max-warnings=0

      - name: CodeQL init
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: CodeQL analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: /language:javascript

      - name: Trivy (filesystem)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          format: table
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: '1'

      - name: Start API (for DAST) - fail fast + debug URI
        if: ${{ inputs.run_zap }}
        env:
          PORT: ${{ inputs.port }}   # ex: 5005
          DB_URI: mongodb://127.0.0.1:27017/blogger-ci?serverSelectionTimeoutMS=1500&connectTimeoutMS=1500
          NODE_ENV: production
          JWT_SECRET: ci-secret
        run: |
          echo "DEBUG DB_URI=$DB_URI"
          nohup node server.js >/tmp/app.log 2>&1 &
          npx -y wait-on@8 -t 60000 "tcp:127.0.0.1:${{ inputs.port }}" || {
            echo "---- /tmp/app.log (últimas linhas) ----"
            tail -n 200 /tmp/app.log || true
            CID=$(docker ps --filter "name=mongo" -q | head -n1)
            echo "---- mongo logs ----"
            docker logs "$CID" | tail -n 200 || true
            exit 1
          }

      - name: ZAP rules
        if: ${{ inputs.run_zap }}
        shell: bash
        run: |
          mkdir -p .zap
          cat > .zap/rules.tsv <<'TSV'
          10020   IGNORE   Missing Anti-clickjacking Header
          10021   IGNORE   X-Content-Type-Options Header Missing
          10037   IGNORE   X-Powered-By header leaks info
          10038   IGNORE   Content Security Policy (CSP) Header Not Set
          10049   IGNORE   Storable and Cacheable Content
          10055   IGNORE   CSP: Failure to Define Directive with No Fallback
          10063   IGNORE   Permissions Policy Header Not Set
          10098   IGNORE   Cross-Domain Misconfiguration
          90004   IGNORE   Insufficient Site Isolation (Spectre)
          90005   IGNORE   Sec-Fetch-Dest Header is Missing
          TSV

      - name: ZAP Baseline
        if: ${{ inputs.run_zap }}
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: http://127.0.0.1:${{ inputs.port }}/
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-m 1'
          fail_action: false
          allow_issue_writing: false
          artifact_name: 'zap_local_report'

  osv_scan:
    uses: "google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@v2.2.2"
    permissions:
      actions: read
      security-events: write
      contents: read
    with:
      scan-args: |-
        --recursive
        ./